package laustrup.bandwichpersistencedebugging.services.persistence_services.assembling_services.sub_assemblings.user_assemblings;

import laustrup.bandwichpersistencedebugging.models.Rating;
import laustrup.bandwichpersistencedebugging.models.albums.Album;
import laustrup.bandwichpersistencedebugging.models.chats.ChatRoom;
import laustrup.bandwichpersistencedebugging.models.chats.messages.Bulletin;
import laustrup.bandwichpersistencedebugging.models.events.Event;
import laustrup.bandwichpersistencedebugging.models.users.contact_infos.ContactInfo;
import laustrup.bandwichpersistencedebugging.models.users.subscriptions.Subscription;
import laustrup.bandwichpersistencedebugging.services.persistence_services.assembling_services.Assembler;
import laustrup.bandwichpersistencedebugging.services.persistence_services.assembling_services.sub_assemblings.ModelAssembly;
import laustrup.bandwichpersistencedebugging.utilities.Liszt;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;

public abstract class UserAssembler extends Assembler {

    /**
     * The identification value in the database for a specific entity.
     * Must be unique, if there ain't other ids for this entity.
     */
    protected long _id;

    /**
     * The title of the user, that the user uses to use as a title for the profile.
     */
    protected String _username;

    /**
     * The real first name of the user's name.
     */
    protected String _firstName;

    /**
     * The real last name of the user's name.
     */
    protected String _lastName;

    /**
     * The real full name of the user's name.
     * Is generated by first- and last name.
     */
    protected String _fullName;

    /**
     * This is what the user uses to describe itself.
     */
    protected String _description;

    /**
     * An object that has the different attributes,
     * that can be used to contact this user.
     */
    protected ContactInfo _contactInfo;

    /**
     * An album consisting of images.
     */
    protected Liszt<Album> _albums;

    /**
     * Ratings made from other users on this user based on a value.
     */
    protected Liszt<Rating> _ratings;

    /**
     * The Events that this user is included in.
     */
    protected Liszt<Event> _events;

    /**
     * These ChatRooms can be used to communicate with other users.
     */
    protected Liszt<ChatRoom> _chatRooms;

    /**
     * This subscription defines details of subscription,
     * including its status.
     * Only Artists and Bands can have a premium membership,
     * since they are the only paying users.
     */
    protected Subscription _subscription;

    /**
     * Messages by other Users.
     */
    protected Liszt<Bulletin> _bulletins;

    /**
     * Specifies the time this entity was created.
     */
    protected LocalDateTime _timestamp;

    protected void setupUserAttributes(ResultSet set) throws SQLException {
        _id = set.getLong("users.id");
        _username = set.getString("users.username");
        _firstName = set.getString("users.first_name");
        _lastName = set.getString("users.last_name");
        _description = set.getString("users.description");
        _contactInfo = ModelAssembly.get_instance().assembleContactInfo(set);
        _albums = new Liszt<>();
        _ratings = new Liszt<>();
        _events = new Liszt<>();
        _chatRooms = new Liszt<>();
        _subscription = ModelAssembly.get_instance().assembleSubscription(set);
        _bulletins = new Liszt<>();
        _timestamp = set.getTimestamp("users.timestamp").toLocalDateTime();
    }

    protected void resetUserAttributes() {
        _id = 0;
        _username = new String();
        _description = new String();
        _contactInfo = null;
        _ratings = new Liszt<>();
        _events = new Liszt<>();
        _chatRooms = new Liszt<>();
        _subscription = null;
        _bulletins = new Liszt<>();
        _timestamp = null;
    }
}
